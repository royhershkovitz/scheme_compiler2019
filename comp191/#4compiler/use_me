#use "semantic-analyser.ml";;

(*#use "code-gen.ml";;
#use "compiler.ml";;*)
open Semantics;;
open Tag_Parser;;
open Reader;;


let string_to_asts s = List.map Semantics.run_semantics
                         (Tag_Parser.tag_parse_expressions
                            (Reader.read_sexprs s));;
string_to_asts "
;purpose-find error in Applic TP
;the test is not based on the ram amount
(define lst '(1 2 3 4 5 6 7 8))
;we will use for in for n times to get to 8^n=2^3n
(define kill-TP
	(lambda (cur f)
		(if (null? cur) 
			#t 
			(( lambda () (f) (kill-TP (cdr cur) f) ))
		)
	)
)
(define explode (let* (
	(x1 	(lambda() 
			(kill-TP lst 
				(lambda () #t))))
	(x2	(lambda()
			(kill-TP lst x1)))
	(x3	(lambda()
			(kill-TP lst x2)))
	(x4	(lambda()
			(kill-TP lst x3)))
	(x5	(lambda()
			(kill-TP lst x4)))
	(x6	(lambda()
			(kill-TP lst x5)))
	(x7	(lambda()
			(kill-TP lst x6)))
	(x8	(lambda()
			(kill-TP lst x7)))
	(x9	(lambda()
			(kill-TP lst x8)))
	(x10	(lambda()
			(kill-TP lst x9)))
	(x11	(lambda()
			(kill-TP lst x10)))
	(x12	(lambda()
			(kill-TP lst x11)))
	(x13	(lambda()
			(kill-TP lst x12)))
	(x14	(lambda()
			(kill-TP lst x13)))
    )
	x6
))
(explode)

";;